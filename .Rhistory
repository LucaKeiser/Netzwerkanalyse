labs(title = "Ständerätliches Netzwerk - Gemeinsame Einsitze in Organisationen | Communities",
subtitle = "Communities anhand Algorithmus Louvian ausgearbeitet",
size = "Degree",
color = "Partei")
# Chunk 11
## Auswahl des Algorithmus mit der besten Modularität für das Parlamentarier:innen-Netzwerk
SR_organisationen_tidy_com <- SR_organisationen_tidy %>%
activate(edges) %>%
filter(weight > 1)
# Fast & Greedy
fg_o <- modularity(
cluster_fast_greedy(SR_organisationen_tidy_com)
)
# Infomap
in_o <- modularity(
cluster_infomap(SR_organisationen_tidy_com)
)
# Edge Betweenness
eb_o <- modularity(
cluster_edge_betweenness(SR_organisationen_tidy_com)
)
# Louvian
lv_o <- modularity(
cluster_louvain(SR_organisationen_tidy_com)
)
## Dataframe
Algorithm <- c("Fast & Greedy",
"Infomap",
"Edge Betweenness",
"Louvian")
Modularity <- c(fg_o,
in_o,
eb_o,
lv_o)
kable(data.frame(Algorithm,Modularity),
caption = "Tabelle 2:Modularity Scores des Organisationsnetzwerks basierend auf verschiedenen Community-Algorithmen")
# Chunk 12
set.seed(12345)
SR_organisationen_tidy_com  %>%
activate(nodes) %>%
slice(index_org) %>%
mutate(group_louvain= as.factor(group_louvain())) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width = weight),
alpha = 0.5,
show.legend = FALSE) +
geom_node_point(aes(color = industry_org,
size  = degree)) +
geom_node_text(aes(label = name),
repel = TRUE,
size = 3) +
geom_mark_hull(aes(x = x,
y = y,
fill = group_louvain,
label = group_louvain),
concavity = 6) +
scale_edge_width(range = c(0.2, 0.8)) +
scale_size(range = c(1, 6)) +
labs(title = "Organisationsnetzwerk - Geteilte Parlamentarier:innen",
subtitle = "Je breiter die Kanten, desto mehr Parlamentarier:innen 'teilen' sich die Organisationen",
size = "Degree",
color = "Branche",
caption = "Organisationen mit einer Gewichtung von <= 1 wurden herausgefiltert.")
# Chunk 13
Communities <- c()
for(i in 1:12){
text <- paste("Community ", as.character(i))
Communities <- append(Communities, text)
}
Kategorie <-  c("Wirtschaft Zürich",
"Ostschweizer Netzwerk",
"Sport und Freizeit",
"-",
"Politische Inklusion und Ökologie",
"Glarner Community",
"Zentralschweizer Netz",
"Umwelt und Verkehr",
"Umwelt und Verkehr",
"-",
"-",
"-")
kable(as.data.frame(Communities, Kategorie),
caption = "Tabelle 3: Interpretation der Communities im organisationalen Netzwerk")
# Chunk 14
# Standardisierte Funktion wird geschrieben, damit wir in einem Schritt die Netzwerkparameter aller Modelle herausarbeiten können.
parameters_network <- function(name_net, network){
# Density
net_dens <- as.numeric(graph.density(network))
# Size (edges)
net_size <- as.numeric(gsize(network))
# Size (nodes)
net_nodes <- as.numeric(gorder(network))
# Mean Degree
net_mdeg <- as.numeric(mean(igraph::degree(network)))
# Transitivity
net_trans <- as.numeric(transitivity(network))
output <- c(name_net, net_dens, net_size, net_nodes, net_mdeg, net_trans)
return(output)
}
parliment_orgs <- parameters_network("Parlimenatry Network", SR_organisationen_tidy_com)
# Chunk 15
net_nodes <- gorder(SR_organisationen_tidy_com)
net_dens <- graph.density(SR_organisationen_tidy_com)
erg_model <- erdos.renyi.game(n = net_nodes,
p.or.m = net_dens,
type='gnp')
wsg_model <- watts.strogatz.game(dim=.5,
size=net_nodes,
nei = 1,
p=.1)
bg_model <- barabasi.game(net_nodes,
out.dist=c(.33,.33,.33),
directed=FALSE,
zero.appeal=1)
erg_model_param <- parameters_network("Erdos Renyi Game", erg_model)
wsg_model_param <- parameters_network("Watts Strogatz Game", wsg_model)
bg_mode_param <- parameters_network("Barabasi Game", bg_model)
# Chunk 16
Dataframe_Names <- c("Dataset Name", "Density", "Size (edges)", "Size (nodes)", "Mean Degree", "Transitivity")
df_model <- as.data.frame(do.call(rbind,list(Dataframe_Names,
parliment_orgs,
erg_model_param,
wsg_model_param,
bg_mode_param)))
df_model <- df_model %>%
row_to_names(row_number = 1)
kable(df_model, caption = "Tabelle 4: Model comparison empirical network vs. modelled networks")
# Chunk 17
# Vergleich empirisches Netzwerk mit Modell
p1 <- SR_organisationen_tidy_com %>%
activate(edges) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_point() +
scale_edge_width(range = c(0.2, 0.8)) +
scale_size(range = c(1, 6)) +
labs(title = "Empirisches Netzwerk",
subtitle = "Organisationen im Ständerat, Verbunden über Parlamentarier:innen")
p2 <- as_tbl_graph(erg_model) %>%
activate(edges) %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_point() +
scale_edge_width(range = c(0.2, 0.8)) +
scale_size(range = c(1, 6)) +
labs(title = "Erdos Renyi Game - Modellierung",
subtitle = "Modell basierend auf empirischen Daten")
grid.arrange(p1, p2, ncol = 2)
# Chunk 18
edges <- SR_organisationen_tidy_com %>%
activate(edges) %>%
data.frame()
nodes <- SR_organisationen_tidy_com %>%
activate(nodes) %>%
filter(degree >= 35) %>%
data.frame() %>%
replace_na(list(location_org = "NA", industry_org  = "NA"))
network_base <- network(edges, vertex.attr = nodes, matrix.type = "edgelist", ignore.eval = FALSE, directed = FALSE)
data(network_base)
null_model <- ergm(network_base ~ edges, control = control.ergm(seed = 10))
summary(null_model)
# Chunk 19
SR_organisationen_tidy_com %>%
activate(nodes) %>%
filter(degree >= 35) %>%
data.frame() %>%
ggplot(aes(x = industry_org, y = degree)) +
geom_boxplot() +
coord_flip() +
labs(title = "Industrie und Degree",
subtitle = "Visualisierung des Zusammenhanges zwischen der Industrie und dem Degree des Unternehmens",
caption = "Organisationen mit einem Degree unter 35 wurden herausgefilter.")
SR_organisationen_tidy_com %>%
activate(nodes) %>%
filter(degree >= 35) %>%
data.frame() %>%
ggplot(aes(x = location_org, y = degree)) +
geom_boxplot() +
coord_flip() +
labs(title = "Standort und Degree",
subtitle = "Visualisierung des Zusammenhanges zwischen dem Standort und dem Degree des Unternehmens",
caption = "Organisationen mit einem Degree unter 35 wurden herausgefilter.")
# Chunk 20
data(network_base)
full_model <- ergm(network_base ~ edges + nodefactor("location_org") + nodefactor("industry_org"),
control = control.ergm(seed = 10))
summary(full_model)
# Chunk 21
simu <- simulate(full_model, nsim = 1, seed = 1234)
summary(simu)
# Chunk 22
simu_tbl <- as_tbl_graph(simu)
set.seed(12345)
SR_organisationen_tidy_com  %>%
activate(nodes) %>%
filter(degree >= 35) %>%
ggraph(layout = "fr") +
geom_edge_link(color = "grey",
alpha = 0.5,
show.legend = FALSE) +
geom_node_point(aes(color = industry_org,
size  = degree)) +
geom_node_text(aes(label = name),
check_overlap = TRUE,
size = 2) +
scale_edge_width(range = c(0.1, 0.75)) +
scale_size(range = c(1, 6)) +
labs(title = "Empirisches Organisationsnetzwerk",
size = "Degree",
color = "Branche",
caption = "Organisationen mit einem Degree < 35 wurden herausgefiltert.")
simu_tbl %>%
activate(nodes) %>%
filter(degree >= 35) %>%
ggraph(layout = "fr") +
geom_edge_link(color = "grey",
alpha = 0.5,
show.legend = FALSE) +
geom_node_point(aes(color = industry_org,
size  = degree)) +
geom_node_text(aes(label = name),
check_overlap = TRUE,
size = 2) +
scale_edge_width(range = c(0.1, 0.75)) +
scale_size(range = c(1, 6)) +
labs(title = "Simuliertes Organisationsnetzwerk",
subtitle = "Methode: ERGM",
size = "Degree",
color = "Branche",
caption = "Organisationen mit einem Degree < 35 wurden herausgefiltert.")
# Erstellen eines bipartiten Netzwerks anhand der Edgelist
# Edgelist (Parlamentarier:in und Organisation (Event))
edgelist <- doc_SR %>%
select(parlamentarier_name, organisation_name)
# ansehen
edgelist
edgelist %>%
count(parlamentarier_name,
sort = TRUE)
edgelist %>% count(organisation_name,
sort = TRUE)
# Bipartites Netzwerk
SR_bipartite_igraph <- graph.data.frame(edgelist,
directed = TRUE)
# Noch nicht ganz...
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# Die Konten müssen noch differenziert werden (Parlamentarier:innen vs. Organisationen)
V(SR_bipartite_igraph)$name
edgelist[,1]
edgelist[,2]
V(SR_bipartite_igraph)$type <- V(SR_bipartite_igraph)$name %in% edgelist[,1]$parlamentarier_name
# Jetzt sieht es gut aus!
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# 45 Parlamentarier:innen und 636 Organisationen
table(get.vertex.attribute(SR_bipartite_igraph)$type)
list.vertex.attributes(SR_bipartite_igraph)
# Pakete laden
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
library(knitr)
library(ggforce)
library(sna)
library(janitor)
library(gridExtra)
library(ergm)
theme_set(theme_light())
# Einsatz meherer Prozessoren
doParallel::registerDoParallel(cores = 4)
# Datensatz laden
doc <- read_delim(here::here("Data", "Lobbywatch", "cartesian_minimal_parlamentarier_interessenbindung.csv"),
delim = "\t")
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR") %>%
filter(organisation_rechtsform != "Parlamentarische Gruppe")
# Erstellen eines bipartiten Netzwerks anhand der Edgelist
# Edgelist (Parlamentarier:in und Organisation (Event))
edgelist <- doc_SR %>%
select(parlamentarier_name, organisation_name)
# ansehen
edgelist
edgelist %>%
count(parlamentarier_name,
sort = TRUE)
edgelist %>% count(organisation_name,
sort = TRUE)
# Bipartites Netzwerk
SR_bipartite_igraph <- graph.data.frame(edgelist,
directed = TRUE)
# Noch nicht ganz...
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# Die Konten müssen noch differenziert werden (Parlamentarier:innen vs. Organisationen)
V(SR_bipartite_igraph)$name
edgelist[,1]
edgelist[,2]
V(SR_bipartite_igraph)$type <- V(SR_bipartite_igraph)$name %in% edgelist[,1]$parlamentarier_name
# Jetzt sieht es gut aus!
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# 45 Parlamentarier:innen und 636 Organisationen
table(get.vertex.attribute(SR_bipartite_igraph)$type)
# Pakete laden
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
library(knitr)
library(ggforce)
library(sna)
library(janitor)
library(gridExtra)
library(ergm)
theme_set(theme_light())
# Einsatz meherer Prozessoren
doParallel::registerDoParallel(cores = 4)
# Datensatz laden
doc <- read_delim(here::here("Data", "Lobbywatch", "cartesian_minimal_parlamentarier_interessenbindung.csv"),
delim = "\t")
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR") %>%
filter(organisation_rechtsform != "Parlamentarische Gruppe")
# Erstellen eines bipartiten Netzwerks anhand der Edgelist
# Edgelist (Parlamentarier:in und Organisation (Event))
edgelist <- doc_SR %>%
select(parlamentarier_name, organisation_name)
# ansehen
#head(edgelist)
edgelist %>%
count(parlamentarier_name,
sort = TRUE)
edgelist %>% count(organisation_name,
sort = TRUE)
# Bipartites Netzwerk
SR_bipartite_igraph <- graph.data.frame(edgelist,
directed = TRUE)
# Noch nicht ganz...
#SR_bipartite_igraph
#list.vertex.attributes(SR_bipartite_igraph)
# Die Konten müssen noch differenziert werden (Parlamentarier:innen vs. Organisationen)
#V(SR_bipartite_igraph)$name
#edgelist[,1]
#edgelist[,2]
V(SR_bipartite_igraph)$type <- V(SR_bipartite_igraph)$name %in% edgelist[,1]$parlamentarier_name
# Jetzt sieht es gut aus!
#SR_bipartite_igraph
#list.vertex.attributes(SR_bipartite_igraph)
# 45 Parlamentarier:innen und 636 Organisationen
#table(get.vertex.attribute(SR_bipartite_igraph)$type)
# Hinzufügen weiterer Knotenattribute mit tidygraph
SR_bipartite_tidy <- as_tbl_graph(SR_bipartite_igraph)
# Definieren der Knotenattribute
# 1) Parlamentaier:innen
node_attributes_parl <- doc_SR %>%
select(parlamentarier_name, parlamentarier_geschlecht, parlamentarier_partei, parlamentarier_kanton) %>%
distinct()
# 2) Organisationen
node_attributes_org <- doc_SR %>%
select(organisation_name, organisation_ort, organisation_interessengruppe1, organisation_interessengruppe1_branche) %>%
distinct()
# Hinzufügen
SR_bipartite_tidy <- SR_bipartite_tidy %>%
# Knotenattribute (Parlamentarier)
left_join(node_attributes_parl,
by = c("name" = "parlamentarier_name")) %>%
# Korrektur für Thomas Minder (Parteilos)
mutate(parlamentarier_partei = ifelse(name == "Minder, Thomas", "Parleilos", parlamentarier_partei)) %>%
# Knotenattribute (Organisationen)
left_join(node_attributes_org,
by = c("name" = "organisation_name")) %>%
rename(sex = parlamentarier_geschlecht,
party = parlamentarier_partei,
canton = parlamentarier_kanton,
location_org = organisation_ort,
interest_org = organisation_interessengruppe1,
industry_org = organisation_interessengruppe1_branche)
# aktualisieren des igraph-objekts
SR_bipartite_igraph <- as.igraph(SR_bipartite_tidy)
#list.vertex.attributes(SR_bipartite_igraph)
# ansehen
SR_bipartite_tidy %>%
activate(nodes) %>%
as_tibble() %>%
group_by(type) %>%
slice_head(n = 10)
tibble(
name = V(SR_bipartite_igraph)$name,
type = V(SR_bipartite_igraph)$type,
sex = V(SR_bipartite_igraph)$sex,
party = V(SR_bipartite_igraph)$party,
canton = V(SR_bipartite_igraph)$canton,
place = V(SR_bipartite_igraph)$location_org,
interest = V(SR_bipartite_igraph)$interest_org,
branche = V(SR_bipartite_igraph)$industry_org
) %>%
group_by(type) %>%
slice_head(n = 10)
set.seed(12345)
SR_bipartite_tidy %>%
activate(nodes) %>%
mutate(party = ifelse(is.na(party), "Organisation", party)) %>%
ggraph(layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(shape = type,
color = party),
size = 5) +
geom_node_text(aes(label = name),
size = 2,
check_overlap = TRUE) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse2",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4",
"Parteilos" = "grey",
"Organisation" = "lightblue1")) +
labs(title = "Bipartites Netzwerk - Parlamentarier:innen und Organisationen",
caption = "Aus Platzgründen werden nicht alle Namen angezeigt.",
color = "Partei",
shape = "Parlamentarier:in?")
# Projektionen
SR_projection <- bipartite.projection(SR_bipartite_tidy)
head(SR_projection)
# 1) Organisationen
SR_organisationen_igraph <- SR_projection$proj1
# 2) Parlamentarier:innen
SR_parlamentarier_igraph <- SR_projection$proj2
# Gewichtung
get.adjacency(SR_organisationen_igraph,
sparse = FALSE,
attr = "weight")
get.adjacency(SR_parlamentarier_igraph,
sparse = FALSE,
attr = "weight")
# ansehen
# sehr spärlich...
#table(E(SR_organisationen_igraph)$weight)
#table(E(SR_parlamentarier_igraph)$weight)
# Grafiken werden mit tidygraph erstellt
SR_organisationen_tidy <- as_tbl_graph(SR_organisationen_igraph) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(),
closeness = centrality_closeness())
SR_parlamentarier_tidy <- as_tbl_graph(SR_parlamentarier_igraph) %>%
mutate(degree = centrality_degree(),
closeness = centrality_closeness())
get.adjacency(SR_parlamentarier_igraph,
sparse = FALSE,
attr = "weight")
# Gewichtung
head(get.adjacency(SR_organisationen_igraph,
sparse = FALSE,
attr = "weight"))
# Projektionen
SR_projection <- bipartite.projection(SR_bipartite_tidy)
head(SR_projection)
# 1) Organisationen
SR_organisationen_igraph <- SR_projection$proj1
# 2) Parlamentarier:innen
SR_parlamentarier_igraph <- SR_projection$proj2
# Gewichtung
#get.adjacency(SR_organisationen_igraph,
#sparse = FALSE,
#attr = "weight")
#get.adjacency(SR_parlamentarier_igraph,
#sparse = FALSE,
#attr = "weight")
# ansehen
# sehr spärlich...
#table(E(SR_organisationen_igraph)$weight)
#table(E(SR_parlamentarier_igraph)$weight)
# Grafiken werden mit tidygraph erstellt
SR_organisationen_tidy <- as_tbl_graph(SR_organisationen_igraph) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(),
closeness = centrality_closeness())
SR_parlamentarier_tidy <- as_tbl_graph(SR_parlamentarier_igraph) %>%
mutate(degree = centrality_degree(),
closeness = centrality_closeness())
# in einem ersten Schritt muss dazu ein Filterungsindex erstellt werden
index_org <- SR_organisationen_tidy %>%
activate(edges) %>%
filter(weight > 1) %>%
as_tibble() %>%
select(from, to)
index_org <- c(index_org$from, index_org$to) %>%
unique()
set.seed(12345)
SR_organisationen_tidy %>%
activate(edges) %>%
filter(weight > 1) %>%
activate(nodes) %>%
slice(index_org) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width = weight),
alpha = 0.5,
show.legend = FALSE) +
geom_node_point(aes(color = industry_org,
size  = degree)) +
geom_node_text(aes(label = name),
repel = TRUE,
size = 3) +
scale_edge_width(range = c(0.5, 3)) +
scale_size(range = c(1, 10)) +
labs(title = "Organisationsnetzwerk - Geteilte Parlamentarier:innen",
subtitle = "Je breiter die Kanten, desto mehr Parlamentarier:innen 'teilen' sich die Organisationen",
size = "Degree",
color = "Branche",
caption = "Organisationen mit einer Gewichtung von <= 1 wurden herausgefiltert.")
