ties_SR$weight[ties_SR$weight == 0] <- ties_SR$weight[ties_SR$weight == 0] + 0.05
# erstellen des Netzwerkobjekts
net_SR <- graph_from_data_frame(ties_SR)
net_SR <- as_tbl_graph(net_SR)
# hinzufügen der Knotenattribute
net_SR <- net_SR %>%
activate(nodes) %>%
# Datentyp muss angepasst werden.
mutate(name = as.numeric(name)) %>%
left_join(parlamentarier,
by = c("name" = "id")) %>%
rename("id" = "name",
"name" = "name.y")
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness(),
cent_betweenness = (cent_betweenness - min(cent_betweenness)) / (max(cent_betweenness) - min(cent_betweenness)))
net_SR
# Der Variationsbereich der Gewichtung (Kantenattribut) wird auf [0, 1] festgelegt.
ties_SR$weight <- (ties_SR$weight - min(ties_SR$weight)) /  (max(ties_SR$weight) - min(ties_SR$weight))
# Damit keine Null-Werte entstehend wird 0.05 zu diesen addiert
ties_SR$weight[ties_SR$weight == 0] <- ties_SR$weight[ties_SR$weight == 0] + 0.05
# erstellen des Netzwerkobjekts
net_SR <- graph_from_data_frame(ties_SR)
net_SR <- as_tbl_graph(net_SR)
# hinzufügen der Knotenattribute
net_SR <- net_SR %>%
activate(nodes) %>%
# Datentyp muss angepasst werden.
mutate(name = as.numeric(name)) %>%
left_join(parlamentarier,
by = c("name" = "id")) %>%
rename("id" = "name",
"name" = "name.y")
net_SR
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness())
net_SR
# Kanten
ties_SR
# Knoten
parlamentarier
network::network(parlamentarier, )
groupings
ties_SR
network::network(ties_SR, type = "edgelist")
net <- network::network(ties_SR, type = "edgelist")
net <- network::network(ties_SR, type = "edgelist", directed = FALSE)
betweenness(net, gmode = "graph")
betweenness(net)
degree(net)
class(net)
net
degree(net, gmode = "graph")
library(statnet)
degree(net, gmode = "graph")
closeness(net, gmode = "graph")
betweenness(net, gmode = "graph")
net_SR
net
as.edgelist(net)
get.vertex.attribute(net)
net
get.vertex.attribute(net, "vertex.names")
betweenness(net, gmode = "graph")
net_SR
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = betweenness())
net_SR
net_SR %>% View(nodes)
class(net_SR)
net_SR
as_tibble(net_SR)
as_tibble(net_SR) %>% View()
betweenness(net, gmode = "graph")
x <- betweenness(net, gmode = "graph")
bind_cols(net_SR, x)
net_SR %>% activate(nodes) %>% mutate(x = x)
as_tible(net_SR)
as_tibble(net_SR)
net_SR %>% activate(nodes) %>% mutate(x = x) %>% as_tibble() %>% View()
betweenness(net, gmode = "graph")
as.igraph(net_SR)
as.igraph(net_SR) %>% igraph::betweenness()
as_tibble(net_SR) %>% View()
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggraph)
library(janitor)
library(data.table)
# Einlesen des Datensatzes
doc <- read_delim("Data/Lobbywatch/cartesian_minimal_parlamentarier_interessenbindung.csv",
delim = "\t")
# Wir interessieren uns nur die Ständerät:innen
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR")
parlamentarier <- doc_SR %>%
select(parlamentarier_id,
parlamentarier_name,
parlamentarier_partei) %>%
group_by(parlamentarier_name) %>%
distinct(parlamentarier_id,
.keep_all = TRUE) %>%
arrange(parlamentarier_id) %>%
rename("id" = parlamentarier_id) %>%
rename("name" = parlamentarier_name)
parlamentarier
groupings <- doc_SR %>%
select(parlamentarier_id,
organisation_id) %>%
mutate(parlamentarier_id = str_c(parlamentarier_id, "",
sep = "_")) %>% # Wird später gebraucht, um die einzelnen IDs wieder voneinander trennen zu können.
group_by(organisation_id, parlamentarier_id) %>%
distinct() %>%
summarise(sum = n())
setDT(groupings)
# N = Anahl geteilter Organisationsmitgliedschaften. In diesem Schritt erstellen wir das Kantenattribut.
ties_SR <- groupings[groupings, on = "organisation_id", allow.cartesian = TRUE][parlamentarier_id<i.parlamentarier_id, .N, .(pair = paste0(parlamentarier_id, i.parlamentarier_id))]
# Erstellen eines tidy-Datensatzes
ties_SR <- ties_SR %>%
separate(pair,
into = c("from", "to"),
sep = "_") %>%
rename("weight" = N) %>%
arrange(desc(weight)) %>%
filter(weight >= 5) # Es werden nur Verbindungen zwischen Parlamentarier:innen verwendet, die in >= 5 gleichen Organisationen einsitzen.
# Knoten
parlamentarier
# Kanten
ties_SR
library(network)
net_network <- network(ties_SR,
type = "edgelist",
directed = FALSE)
net_network
net_igraph <- as.igraph(net_network)
library(statnet)
?from_edgelist
net_igraph <- from_edgelist(ties_SR,
directed = FALSE)
net_igraph
net_igraph <- from_edgelist(ties_SR,
directed = FALSE)
net_igraph
as.igraph(net_igraph)
net_igraph <- graph.data.frame(parlamentarier,
directed = FALSE)
net_igraph
net_network
net_igraph <- graph.data.frame(ties_SR,
directed = FALSE)
net_igraph
net_tidy <- graph_from_data_frame(ties_SR,
directed = FALSE)
net_tidy
net_tidy <- as_tbl_graph(ties_SR,
directed = FALSE)
net_tidy
betweenness(net_network,
gmode = "graph")
igraph::betweenness(net_igraph)
tidygraph::centrality_betweenness(net_tidy)
net_tidy %>%
activate(nodes) %>%
centrality_betweenness()
net_tidy %>%
activate(nodes) %>%
mutate(betweenness = centrality_betweenness())
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggraph)
library(janitor)
library(data.table)
# Einlesen des Datensatzes
doc <- read_delim("Data/Lobbywatch/cartesian_minimal_parlamentarier_interessenbindung.csv",
delim = "\t")
# Wir interessieren uns nur die Ständerät:innen
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR")
parlamentarier <- doc_SR %>%
select(parlamentarier_id,
parlamentarier_name,
parlamentarier_partei) %>%
group_by(parlamentarier_name) %>%
distinct(parlamentarier_id,
.keep_all = TRUE) %>%
arrange(parlamentarier_id) %>%
rename("id" = parlamentarier_id) %>%
rename("name" = parlamentarier_name)
groupings <- doc_SR %>%
select(parlamentarier_id,
organisation_id) %>%
mutate(parlamentarier_id = str_c(parlamentarier_id, "",
sep = "_")) %>% # Wird später gebraucht, um die einzelnen IDs wieder voneinander trennen zu können.
group_by(organisation_id, parlamentarier_id) %>%
distinct() %>%
summarise(sum = n())
setDT(groupings)
# N = Anahl geteilter Organisationsmitgliedschaften. In diesem Schritt erstellen wir das Kantenattribut.
ties_SR <- groupings[groupings, on = "organisation_id", allow.cartesian = TRUE][parlamentarier_id<i.parlamentarier_id, .N, .(pair = paste0(parlamentarier_id, i.parlamentarier_id))]
# Erstellen eines tidy-Datensatzes
ties_SR <- ties_SR %>%
separate(pair,
into = c("from", "to"),
sep = "_") %>%
rename("weight" = N) %>%
arrange(desc(weight)) %>%
filter(weight >= 5) # Es werden nur Verbindungen zwischen Parlamentarier:innen verwendet, die in >= 5 gleichen Organisationen einsitzen.
# Knoten
parlamentarier
# Kanten
ties_SR
# Der Variationsbereich der Gewichtung (Kantenattribut) wird auf [0, 1] festgelegt.
ties_SR$weight <- (ties_SR$weight - min(ties_SR$weight)) /  (max(ties_SR$weight) - min(ties_SR$weight))
# Damit keine Null-Werte entstehend wird 0.05 zu diesen addiert
ties_SR$weight[ties_SR$weight == 0] <- ties_SR$weight[ties_SR$weight == 0] + 0.05
# erstellen des Netzwerkobjekts (tidygraph)
net_SR <- as_tbl_graph(ties_SR)
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness())
net_SR
# erstellen des Netzwerkobjekts (tidygraph)
net_SR <- as_tbl_graph(ties_SR,
directed = FALSE)
# hinzufügen der Knotenattribute
net_SR <- net_SR %>%
activate(nodes) %>%
# Datentyp muss angepasst werden.
mutate(name = as.numeric(name)) %>%
left_join(parlamentarier,
by = c("name" = "id")) %>%
rename("id" = "name",
"name" = "name.y")
net_SR
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness())
net_SR
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness()
cent_betweenness = (cent_betweenness - min(cent_betweenness)) / (max(cent_betweenness) - min(cent_betweenness)))
net_SR %>%
activate(edges) %>%
filter(weight > 0.2) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR
as_tibble(net_SR)
as_tibble(net_SR) %>% View()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 2) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness + 3),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness + 5),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness + 10),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
site = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
shape = 21,
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR %>%
activate(nodes) %>%
filter(cent_betweenness > 5) %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = parlamentarier_partei,
size = cent_betweenness),
show.legend = FALSE) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4")) +
theme_graph()
net_SR
net_SR %>% activate(edges)
net_SR %>% activate(edges) %>% as_tibble() %>% View()
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(cent_betweenness = centrality_betweenness(),
degree = centrality_degree())
net_SR
as_tibble(net_SR) %>% View()
# hinzufügen Betweenness-Zentralität
net_SR <- net_SR %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(degree = centrality_degree(),
betweenness = centrality_betweenness(),
closeness = centrality_closeness())
net_SR
summary(net_SR)
igraph::edge_density(net_SR)
# Generelle Netzwerkangaben
edge_density(net_SR)
graph_mean_dist(net_SR)
with_graph(net_SR) %>% mean_distance()
with_graph(net_SR,mean_distance())
with_graph(net_SR, mean_distance())
with_graph(net_SR, igaph::mean_distance())
with_graph(net_SR, igraph::mean_distance())
with_graph(net_SR, mean_distance(net_SR))
with_graph(mean_distance(net_SR))
with_graph(net_SR, mean_distance(net_SR))
with_graph(net_SR, graph_diameter(net_SR))
with_graph(net_SR, graph_diameter())
with_graph(net_SR, mean_distance())
# Generelle Netzwerkangaben
net_SR
edge_density(net_SR)
edge_density(net_SR, loops = FALSE)
# Dichte
edge_density(net_SR,
loops = FALSE)
count_components(net_SR)
count_components(net_SR,
mode = "weak")
count_components(net_SR,
mode = "strong")
is_connected(net_SR)
# Diameter
diameter(net_SR)
# Diameter
diameter(net_SR,
directed = FALSE)
