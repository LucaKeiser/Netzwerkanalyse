mutate(from = as.numeric(from),
to = as.numeric(to))
# Knoten
parlamentarier
# Kanten
ties_SR
ties_SR_reduced
# Chunk 4
# erstellen des Netzwerkobjekts (tidygraph)
net_SR <- as_tbl_graph(ties_SR,
directed = FALSE) %>%
activate(nodes) %>%
mutate(id = as.numeric(name)) %>%
select(-name)
net_SR_reduced <- as_tbl_graph(ties_SR_reduced,
directed = FALSE)  %>%
activate(nodes) %>%
mutate(id = as.numeric(name)) %>%
select(-name)
# Chunk 5
# Generelle Netzwerkangaben
# Component
comp_sr <- count_components(net_SR)
comp_sr_red <- count_components(net_SR_reduced)
# Dichte
dens_sr <- edge_density(net_SR,
loops = FALSE)
dens_sr_red <- edge_density(net_SR_reduced,
loops = FALSE)
# Diameter
dia_sr <- diameter(net_SR,
directed = FALSE)
dia_sr_red <- diameter(net_SR_reduced,
directed = FALSE)
# Size
size_sr <- gsize(net_SR)
size_sr_red <- gsize(net_SR_reduced)
# Cliques
cliq_sr <- count_max_cliques(net_SR)
cliq_sr_red <- count_max_cliques(net_SR_reduced)
# Erstellen eines zusammenfassenden Dataframes für die Masszahlen
labels_df <- c("Components", "Density", "Diameter", "Size", "Cliques")
measurements_df <- data.frame(Measurement = labels_df,
`With Intraparty Connections` = c(comp_sr,dens_sr,dia_sr,size_sr,cliq_sr),
`Without Intraparty Connections` = c(comp_sr_red,dens_sr_red,dia_sr_red,size_sr_red,cliq_sr_red))
# Tidy Print
kable(measurements_df, caption = "Masszahlen der Netzwerke mit und ohne innerparteilicher Beziehungen")
# Chunk 6
library(statnet)
# Workaround
# erstellen temporärer Objekte zur Zwischenspeicherung
temp_1 <- ties_SR_reduced %>%
left_join(parlamentarier, by = c("from" = "id")) %>%
select(name, weight) %>%
rename("from"  = name)
temp_2 <- ties_SR_reduced %>%
left_join(parlamentarier, by = c("to" = "id")) %>%
select(name) %>%
rename("to"  = name)
network_ties_SR_reduced <- cbind(temp_1, temp_2) %>%
relocate(from, to, weight)
# löschen der temporären Objekte
rm(temp_1, temp_2)
gc()
# erstellen eines network-Objekts
network_SR_reduced <- network(network_ties_SR_reduced,
type = "edgelist",
directed = FALSE)
# Identifizierung der Cutpoints
cutpoints_SR_reduced <- cutpoints(network_SR_reduced,
# graph for undirected graphs
mode = "graph",
return.indicator = TRUE)
# insegsamt wurden 9 Cutpoints gefunden
table(cutpoints_SR_reduced)
# Visualisierung
set.seed(1234)
gplot(network_SR_reduced,
gmode = "graph",
vertex.col = cutpoints_SR_reduced + 3,
vertex.border = cutpoints_SR_reduced + 3,
vertex.cex = 0.7,
edge.col = "grey90",
jitter = FALSE,
displaylabels = TRUE,
label.cex = 0.7,
label.pos = 5,
main = "Cutpoints im reduzierten Netzwerk der Stände:rätinnen",
)
# Chunk 7
bridges <- function(dat,
mode = "graph",
connected = c("strong", "weak")) {
# edgecount
e_cnt <- network.edgecount(dat)
if(mode == "graph") {
# get number of components
cmp_cnt <- components(dat)
b_vec <- rep(FALSE, e_cnt)
for(i in 1:e_cnt) {
dat2 <- dat
delete.edges(dat2, i)
b_vec[i] <- (components(dat2) != cmp_cnt)
}
}
else {
cmp_cnt <- components(dat,
connected = connected)
b_vec <- rep(FALSE, e_cnt)
for(i in 1:e_cnt) {
dat2 <- dat
delete.edges(dat2, i)
b_vec[i] <- (components(dat2,
connected = connected) != cmp_cnt)
}
}
return(b_vec)
}
network_SR_reduced_bridges <- bridges(network_SR_reduced)
# insgesamt wurden 8 Bridges gefunden
table(network_SR_reduced_bridges)
# Visualisierung
set.seed(1234)
gplot(network_SR_reduced,
gmode = "graph",
vertex.col = "grey90",
vertex.border = "grey90",
vertex.cex = 0.7,
edge.col = network_SR_reduced_bridges + 3,
jitter = FALSE,
displaylabels = TRUE,
label.cex = 0.7,
label.pos = 5,
main = "Bridges im reduzierten Netzwerk der Stände:rätinnen",
)
# Chunk 8
# hinzufügen der Knotenattribute
net_SR_reduced <- net_SR_reduced %>%
activate(nodes) %>%
# Datentyp muss angepasst werden.
left_join(parlamentarier,
by = c("id"))
# Hinzufügen Zentralitätsmasse
net_SR_reduced <- net_SR_reduced %>%
activate(nodes) %>%
# Berechnung und standardisierung([0,1]) der Betweenness
mutate(degree = centrality_degree(),
betweenness = centrality_betweenness(),
closeness = centrality_closeness())
# Extrahierung der relevanten Zeilen
masszahlen <- net_SR_reduced %>%
select(name,
parlamentarier_partei,
degree,
betweenness,
closeness) %>%
arrange(desc(degree))
# Tidy Print
kable(masszahlen)
# Chunk 9
# Erstellen mehrerer Clusterings anhand dreier Algorithmen:
# Edge Betweenness, Fast Greedy & Infomap
cluster <- net_SR_reduced %>%
activate(nodes) %>%
mutate(group_edge_betweenness = group_edge_betweenness(),
group_fast_greedy = group_fast_greedy(),
group_infomap = group_infomap()) %>%
select(name,
parlamentarier_partei,
group_edge_betweenness,
group_fast_greedy,
group_infomap) %>%
arrange(group_edge_betweenness)
# Tidy Print
kable(cluster)
# Chunk 10
# Beachten: Um die Cluster darstellen zu können, muss das concaveman-Paket installiert werden
# install.packages("concaveman")
# Hinzufügen der Kantenattribute
set.seed(1245)
net_SR_reduced %>%
activate(nodes) %>%
mutate(group_fast_greedy = as.factor(group_fast_greedy())) %>%
ggraph(layout = "fr") +
geom_node_point(aes(color = parlamentarier_partei,
size = betweenness)) +
geom_node_text(aes(label = name),
repel = TRUE) +
geom_edge_link(aes(width = weight),
show.legend = FALSE) +
geom_mark_hull(aes(x = x, y = y, fill = group_fast_greedy, label = group_fast_greedy)) +
scale_size(range = c(5, 15)) +
scale_edge_width(range = c(0.1, 1)) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse2",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4",
"Parteilos" = "grey")) +
theme_graph() +
labs(title = "Ständerätliches Netzwerk anhand privater Organisationszugehörigkeit - Fruchtermannreingold",
subtitle = "Knotenattribute: Namen, Parteizugehörigkeit und Betweenness-Score\nKantenattribute: gemeinsame Einsitze/Mitgliedschaften\nClustering: Fast & Greedy",
color = "Partei",
caption = "Es werden lediglich Beziehung zwischen Mitgleider:innen unterschiedlicher Parteien visualisiert")
gplot(network_SR_reduced,
gmode = "graph",
vertex.col = "grey90",
vertex.border = "grey90",
vertex.cex = 2,
edge.col = network_SR_reduced_bridges + 3,
jitter = FALSE,
displaylabels = TRUE,
label.cex = 2,
label.pos = 5,
main = "Bridges im reduzierten Netzwerk der Stände:rätinnen",
)
gplot(network_SR_reduced,
gmode = "graph",
vertex.col = "grey90",
vertex.border = "grey90",
vertex.cex = 1.5,
edge.col = network_SR_reduced_bridges + 3,
jitter = FALSE,
displaylabels = TRUE,
label.cex = 1.5,
label.pos = 5,
main = "Bridges im reduzierten Netzwerk der Stände:rätinnen",
)
set.seed(1234)
gplot(network_SR_reduced,
mode = "fruchtermanreingold",
gmode = "graph",
vertex.col = "grey90",
vertex.border = "grey90",
vertex.cex = 1.5,
edge.col = network_SR_reduced_bridges + 3,
jitter = FALSE,
displaylabels = TRUE,
label.cex = 1.5,
label.pos = 5,
main = "Bridges im reduzierten Netzwerk der Stände:rätinnen",
)
set.seed(1234)
gplot(network_SR_reduced,
gmode = "graph",
mode = "fruchtermanreingold",
vertex.col = cutpoints_SR_reduced + 3,
vertex.border = cutpoints_SR_reduced + 3,
vertex.cex = 1.5,
edge.col = "grey90",
jitter = FALSE,
displaylabels = TRUE,
label.cex = 1.5,
label.pos = 5,
main = "Cutpoints im reduzierten Netzwerk der Stände:rätinnen",
)
set.seed(1234)
gplot(network_SR_reduced,
mode = "fruchtermanreingold",
gmode = "graph",
vertex.col = "grey90",
vertex.border = "grey90",
vertex.cex = 1.5,
edge.col = network_SR_reduced_bridges + 3,
jitter = FALSE,
displaylabels = TRUE,
label.cex = 1.5,
label.pos = 5,
main = "Bridges im reduzierten Netzwerk der Stände:rätinnen",
)
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggraph)
library(janitor)
library(data.table)
library(knitr)
library(ggforce)
# Einlesen des Datensatzes
doc <- read_delim(here::here("Data", "Lobbywatch", "cartesian_minimal_parlamentarier_interessenbindung.csv"))
# Wir interessieren uns nur die Ständerät:innen
# Zudem möchten wir lediglich ihre ausserparteilichen Verbindungen
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR") %>%
filter(organisation_rechtsform != "Parlamentarische Gruppe")
parlamentarier <- doc_SR %>%
select(parlamentarier_id,
parlamentarier_name,
parlamentarier_partei) %>%
mutate(parlamentarier_partei = case_when(
is.na(parlamentarier_partei) ~ "Parteilos",
TRUE ~ as.character(parlamentarier_partei))) %>%
group_by(parlamentarier_name) %>%
distinct(parlamentarier_id,
.keep_all = TRUE) %>%
arrange(parlamentarier_id) %>%
rename("id" = parlamentarier_id) %>%
rename("name" = parlamentarier_name)
# Erstellen der Gruppen
groupings <- doc_SR %>%
select(parlamentarier_id,
organisation_id) %>%
mutate(parlamentarier_id = str_c(parlamentarier_id, "",
sep = "_")) %>% # Wird später gebraucht, um die einzelnen IDs wieder voneinander trennen zu können.
group_by(organisation_id, parlamentarier_id) %>%
distinct() %>%
summarise(sum = n())
setDT(groupings)
# N = Anahl geteilter Organisationsmitgliedschaften. In diesem Schritt erstellen wir das Kantenattribut.
ties_SR <- groupings[groupings, on = "organisation_id", allow.cartesian = TRUE][parlamentarier_id<i.parlamentarier_id, .N, .(pair = paste0(parlamentarier_id, i.parlamentarier_id))]
# Erstellen eines tidy-Datensatzes
ties_SR <- ties_SR %>%
separate(pair,
into = c("from", "to"),
sep = "_") %>%
rename("weight" = N) %>%
arrange(desc(weight))
#filter(weight >= 5) # Es werden nur Verbindungen zwischen Parlamentarier:innen verwendet, die in >= 5 gleichen Organisationen einsitzen.
# Wir wollen keine Intraparty-Edges, deshalb werden diese gelöscht.
# Intraparty bedeutet: Personen in derselben Partei werden nicht als Edge dargestellt.
non_interparty <- c()
# Der Loop schaut, ob zwei Nodes mit einer Verbindung derselben Partei angehören. Falls ja, dann wird der Index
# des Paares einer Liste hinzugefügt. Diese Liste wird dann aus unserem Datensatz entfernt.
for(i in 1:nrow(ties_SR)){
from <- ties_SR$from[i]
to <- ties_SR$to[i]
if(parlamentarier[parlamentarier$id == from,3] == parlamentarier[parlamentarier$id == to,3]){
non_interparty <- append(non_interparty,i)
}
}
ties_SR_reduced <- ties_SR[-non_interparty,]
# erstellen eines Tibbles mit angepassten Datentypen
ties_SR <- ties_SR %>%
as_tibble() %>%
mutate(from = as.numeric(from),
to = as.numeric(to))
ties_SR_reduced <- ties_SR_reduced %>%
as_tibble() %>%
mutate(from = as.numeric(from),
to = as.numeric(to))
# Knoten
parlamentarier
# Kanten
ties_SR
ties_SR_reduced
ties_SR_reduced
x <- ties_SR_reduced$from
y <- ties_SR_reduced$to
c(x, y)
z <- c(x, y)
z <- unique(z)
z
View(doc_SR)
doc_SR %>% filter(organisation_id %in% z) %>% unique()
doc_SR %>% filter(organisation_id %in% z) %>% slect(organisation_name) %>%  unique()
doc_SR %>% filter(organisation_id %in% z) %>% select(organisation_name) %>%  unique()
doc_SR %>% filter(organisation_id %in% z) %>% select(organisation_name)
z
# Pakete laden
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
theme_set(theme_light())
# Datensatz laden
doc <- read_delim(here::here("Data", "Lobbywatch", "cartesian_minimal_parlamentarier_interessenbindung.csv"),
delim = "\t")
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR") %>%
filter(organisation_rechtsform != "Parlamentarische Gruppe")
# Erstellen eines bipartiten Netzwerks anhand der Edgelist
# Edgelist (Parlamentarier:in und Organisation (Event))
edgelist <- doc_SR %>%
select(parlamentarier_name, organisation_name)
# ansehen
edgelist
edgelist %>%
count(parlamentarier_name,
sort = TRUE)
edgelist %>% count(organisation_name,
sort = TRUE)
# Bipartites Netzwerk
SR_bipartite_igraph <- graph.data.frame(edgelist,
directed = TRUE)
# Noch nicht ganz...
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# Die Konten müssen noch differenziert werden (Parlamentarier:innen vs. Organisationen)
V(SR_bipartite_igraph)$name
edgelist[,1]
edgelist[,2]
V(SR_bipartite_igraph)$type <- V(SR_bipartite_igraph)$name %in% edgelist[,1]$parlamentarier_name
# Jetzt sieht es gut aus!
SR_bipartite_igraph
list.vertex.attributes(SR_bipartite_igraph)
# 45 Parlamentarier:innen und 636 Organisationen
table(get.vertex.attribute(SR_bipartite_igraph)$type)
# Hinzufügen weiterer Knotenattribute mit tidygraph
SR_bipartite_tidy <- as_tbl_graph(SR_bipartite_igraph)
# Definieren der Knotenattribute
# 1) Parlamentaier:innen
node_attributes_parl <- doc_SR %>%
select(parlamentarier_name, parlamentarier_geschlecht, parlamentarier_partei, parlamentarier_kanton) %>%
distinct()
# 2) Organisationen
node_attributes_org <- doc_SR %>%
select(organisation_name, organisation_ort, organisation_interessengruppe1, organisation_interessengruppe1_branche) %>%
distinct()
# Hinzufügen
SR_bipartite_tidy <- SR_bipartite_tidy %>%
# Knotenattribute (Parlamentarier)
left_join(node_attributes_parl,
by = c("name" = "parlamentarier_name")) %>%
# Korrektur für Thomas Minder (Parteilos)
mutate(parlamentarier_partei = ifelse(name == "Minder, Thomas", "Parleilos", parlamentarier_partei)) %>%
# Knotenattribute (Organisationen)
left_join(node_attributes_org,
by = c("name" = "organisation_name")) %>%
rename(sex = parlamentarier_geschlecht,
party = parlamentarier_partei,
canton = parlamentarier_kanton,
location_org = organisation_ort,
interest_org = organisation_interessengruppe1,
industry_org = organisation_interessengruppe1_branche)
# aktualisieren des igraph-objekts
SR_bipartite_igraph <- as.igraph(SR_bipartite_tidy)
list.vertex.attributes(SR_bipartite_igraph)
# ansehen
SR_bipartite_tidy %>%
activate(nodes) %>%
as_tibble() %>%
group_by(type) %>%
slice_head(n = 10)
tibble(
name = V(SR_bipartite_igraph)$name,
type = V(SR_bipartite_igraph)$type,
sex = V(SR_bipartite_igraph)$sex,
party = V(SR_bipartite_igraph)$party,
canton = V(SR_bipartite_igraph)$canton,
place = V(SR_bipartite_igraph)$location_org,
interest = V(SR_bipartite_igraph)$interest_org,
branche = V(SR_bipartite_igraph)$industry_org
) %>%
group_by(type) %>%
slice_head(n = 10)
# Projektionen
SR_projection <- bipartite.projection(SR_bipartite_igraph)
SR_projection
# 1) Organisationen
SR_organisationen_igraph <- SR_projection$proj1
# 2) Parlamentarier:innen
SR_parlamentarier_igraph <- SR_projection$proj2
# Gewichtung
get.adjacency(SR_organisationen_igraph,
sparse = FALSE,
attr = "weight")
get.adjacency(SR_parlamentarier_igraph,
sparse = FALSE,
attr = "weight")
# ansehen
# sehr spärlich...
table(E(SR_organisationen_igraph)$weight)
table(E(SR_parlamentarier_igraph)$weight)
# Grafiken werden mit tidygraph erstellt
SR_organisationen_tidy <- as_tbl_graph(SR_organisationen_igraph)
SR_parlamentarier_tidy <- as_tbl_graph(SR_parlamentarier_igraph)
set.seed(1234)
SR_parlamentarier_tidy %>%
ggraph(layout = "fr") +
geom_node_point(aes(color = party),
size = 5) +
geom_node_text(aes(label = name),
check_overlap = TRUE) +
geom_edge_link(aes(width = weight),
color = "grey",
show.legend = FALSE) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse2",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4",
"Parteilos" = "grey")) +
scale_edge_width(range = c(0.1, 0.5))
set.seed(1234)
SR_parlamentarier_tidy %>%
ggraph(layout = "fr") +
geom_node_point(aes(color = party),
size = 5) +
geom_edge_link(aes(width = weight),
color = "grey",
show.legend = FALSE) +
geom_node_text(aes(label = name),
check_overlap = TRUE) +
scale_color_manual(values = c("FDP" = "cornflowerblue",
"Grüne" = "chartreuse2",
"M" = "darkorange",
"SP" = "brown1",
"SVP" = "chartreuse4",
"Parteilos" = "grey")) +
scale_edge_width(range = c(0.1, 0.5))
# Pakete laden
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
theme_set(theme_light())
# Datensatz laden
doc <- read_delim(here::here("Data", "Lobbywatch", "cartesian_minimal_parlamentarier_interessenbindung.csv"),
delim = "\t")
doc_SR <- doc %>%
filter(parlamentarier_rat == "SR") %>%
filter(organisation_rechtsform != "Parlamentarische Gruppe")
